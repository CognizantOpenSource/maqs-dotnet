name: Build
on:
  schedule:
    - cron: "13 23 * * *"
  push:
    branches:
      - main
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      override:
        description: 'Version Number'     
        required: true
        default: '0.0.0'

jobs:

  waitOld:
    name: Wait For Older Runs To Complete
    runs-on: ubuntu-latest
    steps:
    - name: Wait
      id: wait
      shell: pwsh
      run: |
            $runID = ${{ github.run_id }} 
            $endPoint = "https://api.github.com/repos/${{github.repository}}/actions/runs"

            $timeout = New-TimeSpan -Minutes 60
            $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()

            do {
                $result = Invoke-RestMethod -Uri $endPoint
                $builds = $result.workflow_runs | Where-Object {$_.name -eq  "Build" -and ($_.status -eq "in_progress" -or $_.status -eq "queued") -and $_.id -lt  $runID}
                
                # Check if there were any older build runs still going, if not we waited long enough
                if (!$builds) 
                { 
                  Write-Host "Are now top of the run queue"
                  return 
                }

                Start-Sleep -s 60
                Write-Host "Waited so far $($stopwatch.elapsed)"

            } while ($stopwatch.elapsed -lt $timeout)

             Write-Host "Waited more than an hour for earlier runs to complete, continuing action pipeline"

  draftRelease:
    name: Draft release
    needs: waitOld
    runs-on: ubuntu-latest
    steps:
      # Drafts your next Release notes as Pull Requests are merged into "main"
      - uses: release-drafter/release-drafter@v5
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
  getVersion:
    name: Get package version
    runs-on: ubuntu-latest 
    needs: draftRelease
    outputs:
      buildNumber: ${{ steps.ver.outputs.BUILD_NUMBER }}
    
    steps: 
    - name: GetVersion
      id: ver
      shell: pwsh
      run: |
            if ("${{github.event.inputs.override}}")
            {
              Write-Host "Using manually entered override version"
              $version = "${{ github.event.inputs.override}}"
            }
            else
            {
              $header = @{Authorization = 'Bearer ${{ secrets.GITHUB_TOKEN }}' }
              $endPoint = "https://api.github.com/repos/${{github.repository}}/releases"
              $info = Invoke-RestMethod -Uri $endPoint -Headers $header
              $version = $info.name[0].Trim("v")
            }
            
            Write-Host "::set-output name=BUILD_NUMBER::$($version)"

  test-untils:
    name: Utils
    needs: waitOld
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: builder
        env:
          GlobalMaqs:ConfigJsonEnvRunOverride: ENV
          GlobalMaqs:ConfigJsonEnvRun: ENV
          GlobalMaqs:ConfigJsonEnv: ENV
          GlobalMaqs:EnvOnly: ENV
        uses: ./.github/workflows/buildtest-action
        with:
          bt-param: 'Framework/UtilitiesUnitTests/UtilitiesUnitTests.csproj --settings Framework/Parallel.RunSettings  --logger trx --results-directory "${{github.workspace}}/artifactTests/untils/testResults/" /p:CoverletOutput="${{github.workspace}}/artifactTests/untils/" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover'
      - uses: actions/upload-artifact@v2
        if: always()
        name: "Upload test artifact"
        with:
          name: untilResults
          path: |
            artifactTests/untils/**/*.xml
            artifactTests/untils/**/*.coverage
            artifactTests/untils/testResults/
  sonar:
    name: Sonar
    # Skip when dependabot PR - Dependabot PRs cannot access action secrets
    if: github.actor != 'dependabot[bot]'
    runs-on: windows-2019
    needs: [test-untils, getVersion]
    steps:
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - uses: actions/download-artifact@v2
        with:
          path: ${{ github.workspace }}/Results
          
      - name: Update coverage mappings
        shell: pwsh
        run: |
          $rootPath = "${{ github.workspace }}/Results"
          $sourcePath = "${{ github.workspace }}"

          Write-Host "Start updating relative paths"

          Function Replace($path, $pattern, $replace)
          {
              $text = (Get-Content $path) -join "`n"
              [System.Text.RegularExpressions.Regex]::Replace($text, $pattern, $replace) |  Out-File -encoding ASCII $path
          }

          $files = Get-ChildItem -Path $rootPath -Recurse -Include *.xml
          foreach ($file in $files)
          {
              get-content $file
              Write-Host "Updating" $file
              Replace $file.FullName '(?<=fullPath=")(([\w\d\s/\\:]+)(?=[\\/][Ff]ramework))' $sourcePath 
              Replace $file.FullName '(?<=fullPath="[\w\d\s/.\\:]+)((/)(?=[\w\d\s/.]+"))' "\"
              get-content $file
          }

          $files = Get-ChildItem -Path $rootPath  -Recurse  -Include *.trx
          foreach ($file in $files)
          {
              get-content $file
              Write-Host "Updating" $file
              Replace $file.FullName '(?<=codeBase=")(([\w\d\s/\\:]+)(?=[\\/][Ff]ramework))' $sourcePath
              Replace $file.FullName '(?<=codeBase="[\w\d\s/.\\:]+)((/)(?=[\w\d\s/.]+"))' "\"
              Replace $file.FullName '(?<=storage=")(([\w\d\s/\\:]+)(?=[\\/][Ff]ramework))' $sourcePath.ToLower()
              Replace $file.FullName '(?<=storage="[\w\d\s/.\\:]+)((/)(?=[\w\d\s/.]+"))' "\"
              get-content $file
          }

          Write-Host "Finished updating relative paths"
          
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          
      - name: Run tests
        env:
          GlobalMaqs:ConfigJsonEnvRunOverride: ENV
          GlobalMaqs:ConfigJsonEnvRun: ENV
          GlobalMaqs:ConfigJsonEnv: ENV
          GlobalMaqs:EnvOnly: ENV
        shell: powershell
        run: dotnet test Framework/UtilitiesUnitTests/UtilitiesUnitTests.csproj  --settings Framework/Parallel.RunSettings   --results-directory "${{ github.workspace }}/artifactTests/zz/coverage/testResults/" /p:CoverletOutput="${{ github.workspace }}/artifactTests/zz/coverage/testResults/" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover -c Release -v D
      
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"CognizantOpenSource_maqs-dotnet" /o:"cognizantopensource" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:projectVersion="${{ needs.getVersion.outputs.buildNumber }}"  /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths=${{ github.workspace }}\Results\**\coverage*.opencover.xml  /d:sonar.cs.dotcover.reportsPaths=${{ github.workspace }}\Results\**\*.coverage
          dotnet build Framework/Base.sln -p:Version=${{ needs.getVersion.outputs.buildNumber }}
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
          
      - uses: actions/upload-artifact@v2
        if: always()
        name: "Upload test artifact"
        with:
          name: untilResults
          path: |
            artifactTests/zz/**/*.xml
            artifactTests/zz/**/*.coverage
            artifactTests/zz/testResults/
 
  createNugetPacakges:
    name: Create NuGet pacakges
    runs-on: windows-2019
    needs: [getVersion]
    steps:
      - uses: actions/checkout@v2
      
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.101

      - name: Install dependencies
        run: dotnet restore Framework/Base.sln

      - name: Build
        run: |
          dotnet build Framework/Base.sln --no-restore --configuration Release -p:Version=${{needs.getVersion.outputs.buildNumber}} -p:BaseOutputPath="${{github.workspace}}/artifactTests/packages/"

      - uses: actions/upload-artifact@v2
        if: always()
        name: "Upload NuGet packages artifact"
        with:
          name: packages
          path: |
            artifactTests/packages/**/*.nupkg
            artifactTests/packages/**/*.snupkg
            
  publish:
    name: Publish NuGet - v${{ needs.getVersion.outputs.buildNumber }}
    if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch') &&  github.event_name != 'schedule'
    needs: [getVersion, createNugetPacakges, sonar]
    runs-on: windows-2019
    environment: nuget 
    steps:
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101

    - uses: actions/download-artifact@v2
      with:
        name: 'packages'
        path: ${{ github.workspace }}/packages
        
    - name: Deploy to nuget
      run: dotnet nuget push ${{ github.workspace }}/packages/**/*.nupkg --api-key ${{ secrets.APIKEY }} --source https://api.nuget.org/v3/index.json
    
    - name: Publish GitHub release v${{ needs.getVersion.outputs.buildNumber }}
      uses: actions/github-script@v4
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const result = await github.repos.listReleases({
            owner: context.repo.owner,
            repo: context.repo.repo
          })
          
          var id = "NA"
          var data = result.data
          for(var key in data){ 
              if(data[key].tag_name == "v${{ needs.getVersion.outputs.buildNumber }}" && data[key].draft == true)
              {
                  github.repos.updateRelease({
                  release_id: data[key].id,
                  "draft": false,
                  owner: context.repo.owner,
                  repo: context.repo.repo });
                  return;
              }
          }
          console.error("Failed to find related draft release");
